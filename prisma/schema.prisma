// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  username      String
  password      String
  userDetails   UserDetails?
  userDetailsId Int?
}

model UserDetails {
  id            Int                       @id @default(autoincrement())
  user          User                      @relation(fields: [userId], references: [id])
  userId        Int                       @unique
  gender        String
  weight        Float
  height        Int
  foodDiary     FoodDiary?
  foodDiaryId   Int
  trainingPlans UserDetailsTrainingPlan[]
  session       Session[]
}

model TrainingPlan {
  id               Int                       @id @default(autoincrement())
  users            UserDetailsTrainingPlan[]
  sessionTemplates SessionTemplate[]
}

model UserDetailsTrainingPlan {
  userDetails    UserDetails  @relation(fields: [userDetailsId], references: [id])
  userDetailsId  Int
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId Int
  active         Boolean
  assignedAt     DateTime     @default(now())

  @@id([userDetailsId, trainingPlanId])
}

model SessionTemplate {
  id                Int                @id @default(autoincrement())
  description       String
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        Int
  trainingPlans     TrainingPlan[]
  exerciseTemplates ExerciseTemplate[]
  sessions          Session[]
}

model Category {
  id              Int               @id @default(autoincrement())
  sessionTemplate SessionTemplate[]
  name            String
  description     String
}

model ExerciseTemplate {
  id               Int               @id @default(autoincrement())
  title            String
  description      String
  sessionTemplates SessionTemplate[]
  exercises        Exercise[]
}

model Session {
  id                Int             @id @default(autoincrement())
  userDetails       UserDetails     @relation(fields: [userId], references: [id])
  userId            Int
  sessionTemplate   SessionTemplate @relation(fields: [sessionTemplateId], references: [id])
  sessionTemplateId Int
  date              DateTime
  exercises         Exercise[]
}

model Exercise {
  id                         Int                         @id @default(autoincrement())
  session                    Session                     @relation(fields: [sessionId], references: [id])
  sessionId                  Int
  exerciseTemplate           ExerciseTemplate            @relation(fields: [exerciseTemplateId], references: [id])
  exerciseTemplateId         Int
  title                      String
  //An exercise can either be a lifting or a cardio exercise. Prisma apperantly does not offer support for inheritance, so an
  //exercise has to optional attributes cardio and lifting
  liftingExercisePerformance LiftingExercisePerformance?
  cardioExercisePerformance  CardioExercisePerformance?
}

model LiftingExercisePerformance {
  id          Int      @id @default(autoincrement())
  set         Int
  repetitions Int
  weight      Float
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int      @unique
}

model CardioExercisePerformance {
  id           Int      @id @default(autoincrement())
  //time in seconds
  duration     Int
  averageSpeed Float
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId   Int      @unique
}

model FoodDiary {
  id          Int         @id @default(autoincrement())
  userDetails UserDetails @relation(fields: [userId], references: [id])
  userId      Int         @unique
  meals       Meal[]
}

model Meal {
  id          Int       @id @default(autoincrement())
  foodDiary   FoodDiary @relation(fields: [foodDiaryId], references: [id])
  foodDiaryId Int       @unique
  day         DateTime
  time        String
  dish        Dish      @relation(fields: [dishId], references: [id])
  dishId      Int
}

model Dish {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  meals             Meal[]
  nutritionalValues NutritionalValues?
}

model NutritionalValues {
  dish          Dish   @relation(fields: [dishId], references: [id])
  dishId        Int    @unique
  energy        Int
  fat           Float?
  saturatedFat  Float?
  carbohydrates Float?
  sugar         Float?
  protein       Float?
  salt          Float?
}