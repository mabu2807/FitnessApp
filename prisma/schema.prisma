// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String
  image       Bytes?       @db.LongBlob
  password    String?
  authMethod  String
  verified    Boolean      @default(false)
  token       String       @unique
  userDetails UserDetails?
}

model UserDetails {
  user          User        @relation(fields: [userId], references: [id])
  userId        Int         @id
  gender        String
  weight        Float
  height        Int
  dob           DateTime    @default(now())
  activityLevel Int
  goal          String
  foodDiary     FoodDiary?
  sports        UserSport[]
  session       Session[]
  reviews       Review[]
}

model Review {
  id          String      @id @default(uuid())
  text        String
  userDetails UserDetails @relation(fields: [userId], references: [userId])
  userId      Int
}

model Sport {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  image         Bytes?         @db.LongBlob
  users         UserSport[]
  trainingPlans TrainingPlan[]
}

model UserSport {
  userDetails UserDetails @relation(fields: [userId], references: [userId])
  userId      Int
  sport       Sport       @relation(fields: [sportId], references: [id])
  sportId     Int
  active      Boolean
  assignedAt  DateTime    @default(now())

  @@id([userId, sportId])
}

model TrainingPlan {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  image       Bytes? @db.LongBlob
  sport       Sport  @relation(fields: [sportId], references: [id])
  sportId     Int
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  imagePath   String
}

model ExerciseTemplate {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  exercises   Exercise[]
}

model Session {
  id          Int         @id @default(autoincrement())
  userDetails UserDetails @relation(fields: [userId], references: [userId])
  userId      Int
  date        DateTime
  exercises   Exercise[]
}

model Exercise {
  id                         Int                          @id @default(autoincrement())
  session                    Session                      @relation(fields: [sessionId], references: [id])
  sessionId                  Int
  exerciseTemplate           ExerciseTemplate             @relation(fields: [exerciseTemplateId], references: [id])
  exerciseTemplateId         Int
  title                      String
  //An exercise can either be a lifting or a cardio exercise. Prisma apperantly does not offer support for inheritance, so an
  //exercise has two optional attributes cardio and lifting
  liftingExercisePerformance LiftingExercisePerformance[]
  cardioExercisePerformance  CardioExercisePerformance[]
}

model LiftingExercisePerformance {
  id          Int      @id @default(autoincrement())
  repetitions Int
  weight      Int
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
}

model CardioExercisePerformance {
  id         Int      @id @default(autoincrement())
  //time in seconds
  time       Int
  distance   Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int      @unique
}

model FoodDiary {
  id          Int         @id @default(autoincrement())
  userDetails UserDetails @relation(fields: [userId], references: [userId])
  userId      Int         @unique
  meals       Meal[]
}

model Meal {
  id           Int         @id @default(autoincrement())
  foodDiary    FoodDiary   @relation(fields: [foodDiaryId], references: [id])
  foodDiaryId  Int
  day          DateTime
  time         String
  dish         Dish?       @relation(fields: [dishId], references: [id])
  dishId       Int?
  customDish   customDish? @relation(fields: [customDishId], references: [id])
  customDishId Int?
}

model customDish {
  id                  Int               @id @default(autoincrement())
  name                String
  imagePath           String
  meals               Meal[]
  nutritionalValues   NutritionalValues @relation(fields: [nutritionalValuesId], references: [id])
  nutritionalValuesId Int               @unique
}

model Dish {
  id                  Int               @id @default(autoincrement())
  name                String
  imagePath           String
  meals               Meal[]
  nutritionalValues   NutritionalValues @relation(fields: [nutritionalValuesId], references: [id])
  nutritionalValuesId Int               @unique
}

model NutritionalValues {
  id            Int         @id @default(autoincrement())
  Dish          Dish?
  customDish    customDish?
  energy        Int
  fat           Float
  saturatedFat  Float
  carbohydrates Float
  sugar         Float
  protein       Float
  salt          Float
}

model NutritionTippsArticles {
  id        Int    @id @default(autoincrement())
  title     String
  text      String @db.LongText
  imagePath String
  link      String @db.LongText
}
